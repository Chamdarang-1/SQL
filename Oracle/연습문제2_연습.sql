CREATE TABLE STUDENT (
    STDNO CHAR(8) PRIMARY KEY,
    NAME VARCHAR2(20) NOT NULL,
    BIRTH DATE NOT NULL,
    MAJOR VARCHAR2(20) NOT NULL,
    ENR_DATE DATE NOT NULL
    );

CREATE TABLE COURSE(
    CS_ID NUMBER(4) PRIMARY KEY,
    CS_NAME VARCHAR2(30) NOT NULL,
    CS_CREDIT NUMBER(1) NOT NULL,
    CS_DEPT VARCHAR2(30) NOT NULL
    );
    
CREATE TABLE ENROLLMENT(
    ENR_NO NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ENR_STDNO CHAR(8) NOT NULL,
    ENR_CSID NUMBER(4),
    MID_SCORE NUMBER,
    FINAL_SCORE NUMBER,
    TOTAL_SCORE NUMBER,
    GRADE CHAR(1)
    );
    
    
INSERT INTO STUDENT VALUES('20121016','김유신', '1991-01-13', '국문학과', '2012-02-01');
INSERT INTO STUDENT VALUES('20111126','김춘추', '1992-04-11', '경제학과', '2011-02-01');
INSERT INTO STUDENT VALUES('20100216','장보고', '1991-05-23', '컴퓨터학과', '2010-02-01');
INSERT INTO STUDENT VALUES('20120326','강감친', '1991-02-09', '영문학과', '2012-02-01');
INSERT INTO STUDENT VALUES('20130416','이순신', '1992-11-30', '경영학과', '2012-02-01');
INSERT INTO STUDENT VALUES('20110521','송상현', '1992-07-17', '컴퓨터학과', '2011-02-01');

INSERT INTO COURSE VALUES ('1059', '고전문학', '3', '국문학과');
INSERT INTO COURSE VALUES ('2312', '데이터베이스', '3', '컴퓨터학과');
INSERT INTO COURSE VALUES ('1203', 'Easy Writing', '3', '영문학과');
INSERT INTO COURSE VALUES ('2039', '글로벌경제학', '3', '경제학과');
INSERT INTO COURSE VALUES ('2301', '프로그래밍언어', '3', '컴퓨터학과');
INSERT INTO COURSE VALUES ('2303', '컴퓨터과학 개론', '2', '컴퓨터학과');
INSERT INTO COURSE VALUES ('3012', '마케팅 전략', '2', '경영학과');

INSERT INTO ENROLLMENT(ENR_STDNO, ENR_CSID) VALUES (20111126, 1203);
INSERT INTO ENROLLMENT(ENR_STDNO, ENR_CSID) VALUES (20121016, 2301);
INSERT INTO ENROLLMENT(ENR_STDNO, ENR_CSID) VALUES (20121016, 2303);
INSERT INTO ENROLLMENT(ENR_STDNO, ENR_CSID) VALUES (20111126, 2039);
INSERT INTO ENROLLMENT(ENR_STDNO, ENR_CSID) VALUES (20100216, 3012);
INSERT INTO ENROLLMENT(ENR_STDNO, ENR_CSID) VALUES (20120326, 3012);
INSERT INTO ENROLLMENT(ENR_STDNO, ENR_CSID) VALUES (20121016, 2312);
INSERT INTO ENROLLMENT(ENR_STDNO, ENR_CSID) VALUES (20130416, 3012);

SELECT * FROM STUDENT WHERE MAJOR = '컴퓨터학과';

SELECT * FROM COURSE WHERE CS_DEPT = '컴퓨터학과';

SELECT * FROM ENROLLMENT WHERE ENR_STDNO = 20121016;

SELECT NAME, MAJOR, ENR_DATE FROM STUDENT WHERE MAJOR = '국문학과';

SELECT * FROM COURSE WHERE CS_DEPT = '컴퓨터학과' AND CS_CREDIT = 2;

SELECT STDNO, NAME, BIRTH FROM STUDENT WHERE BIRTH >= '1992-01-01';

UPDATE ENROLLMENT 
SET MID_SCORE = 36, 
    FINAL_SCORE = 42 
WHERE ENR_STDNO = '20111126' AND ENR_CSID=1203;

UPDATE ENROLLMENT 
SET MID_SCORE = 24, 
    FINAL_SCORE = 62 
WHERE ENR_STDNO='20121016' AND ENR_CSID=2301;

UPDATE ENROLLMENT 
SET MID_SCORE = 28, 
    FINAL_SCORE = 40 
WHERE ENR_STDNO='20121016' AND ENR_CSID=2303;

UPDATE ENROLLMENT 
SET MID_SCORE = 37, 
    FINAL_SCORE = 57
WHERE ENR_STDNO='20111126' AND ENR_CSID=2039;

UPDATE ENROLLMENT 
SET MID_SCORE = 28, 
    FINAL_SCORE = 68
WHERE ENR_STDNO='20100216' AND ENR_CSID=3012;

UPDATE ENROLLMENT 
SET MID_SCORE = 16, 
    FINAL_SCORE = 65
WHERE ENR_STDNO='20120326' AND ENR_CSID=3012;

UPDATE ENROLLMENT 
SET MID_SCORE = 18, 
    FINAL_SCORE = 38
WHERE ENR_STDNO='20121016' AND ENR_CSID=2312;

UPDATE ENROLLMENT 
SET MID_SCORE = 25, 
    FINAL_SCORE = 58
WHERE ENR_STDNO='20130416' AND ENR_CSID=3012;

UPDATE ENROLLMENT
SET TOTAL_SCORE = MID_SCORE + FINAL_SCORE,
    GRADE = CASE
            WHEN (MID_SCORE + FINAL_SCORE) >= 90 THEN 'A'
            WHEN (MID_SCORE + FINAL_SCORE) >= 80 THEN 'B'
            WHEN (MID_SCORE + FINAL_SCORE) >= 70 THEN 'C'
            WHEN (MID_SCORE + FINAL_SCORE) >= 60 THEN 'D'
            ELSE 'F'
        END;

SELECT * FROM ENROLLMENT;

SELECT * FROM ENROLLMENT ORDER BY TOTAL_SCORE DESC;

SELECT * FROM ENROLLMENT WHERE ENR_CSID = 3012 ORDER BY TOTAL_SCORE;

SELECT CS_ID, CS_NAME FROM COURSE WHERE CS_NAME IN ('데이터베이스', '프로그래밍언어');

SELECT CS_NAME, CS_DEPT FROM COURSE;

SELECT STDNO, NAME FROM STUDENT ORDER BY NAME ASC;

SELECT DISTINCT ENR_STDNO FROM ENROLLMENT;

SELECT MAX(TOTAL_SCORE) AS 가장_큰_총점 FROM ENROLLMENT;

SELECT MAJOR, COUNT(STDNO) AS 학생수 FROM STUDENT GROUP BY MAJOR;

SELECT ENR_CSID, COUNT(ENR_STDNO) AS 학생수 FROM ENROLLMENT GROUP BY ENR_CSID HAVING COUNT(ENR_STDNO) >=2;

SELECT 
    STDNO,
    NAME,
    MAJOR,
    ENR_CSID,
    MID_SCORE,
    FINAL_SCORE,
    TOTAL_SCORE,
    GRADE
FROM STUDENT S
JOIN ENROLLMENT E ON S.STDNO = E.ENR_STDNO;

SELECT NAME, STDNO, ENR_CSID
FROM STUDENT S
JOIN ENROLLMENT E ON S.STDNO = E.ENR_STDNO WHERE ENR_CSID = 3012;

SELECT
    STDNO,
    NAME,
    COUNT(STDNO) AS 수강신청_건수,
    SUM(TOTAL_SCORE) AS 종합점수,
    SUM(TOTAL_SCORE) / COUNT(STDNO) AS 평균
FROM STUDENT S
JOIN ENROLLMENT E ON S.STDNO = E.ENR_STDNO
GROUP BY STDNO, NAME;

SELECT ENR_NO, ENR_STDNO, CS_ID, CS_NAME, CS_CREDIT
FROM ENROLLMENT E
JOIN COURSE C ON C. CS_ID = E.ENR_CSID;

SELECT 
    COUNT(*) AS 마케팅_전략_수강_신청건수,
    AVG(TOTAL_SCORE) AS 마케팅_전략_평균
    FROM ENROLLMENT E
    JOIN COURSE C ON E.ENR_CSID = C.CS_ID
    WHERE CS_ID = 3012;
    
SELECT
    ENR_STDNO, CS_NAME
FROM ENROLLMENT E
JOIN COURSE C ON E.ENR_CSID = C.CS_ID
WHERE GRADE = 'A';

SELECT
    STDNO,
    NAME,
    MAJOR,
    ENR_CSID,
    CS_NAME,
    CS_CREDIT,
    TOTAL_SCORE,
    GRADE
FROM STUDENT S
JOIN ENROLLMENT E ON S.STDNO = ENR_STDNO
JOIN COURSE C ON E.ENR_CSID = CS_ID;

SELECT
    STDNO,
    NAME,
    CS_NAME,
    TOTAL_SCORE,
    GRADE
FROM STUDENT S
JOIN ENROLLMENT E ON S.STDNO = ENR_STDNO
JOIN COURSE C ON E.ENR_CSID = CS_ID
WHERE GRADE ='F';

SELECT
    STDNO,
    NAME,
    SUM(CS_CREDIT) AS 이수학점
FROM STUDENT S 
JOIN ENROLLMENT E ON S.STDNO =ENR_STDNO
JOIN COURSE C ON E.ENR_CSID = CS_ID
WHERE GRADE != 'F'
GROUP BY STDNO, NAME;

SELECT
    S.STDNO,
    S.NAME,
    S.MAJOR
FROM STUDENT S
WHERE S.STDNO NOT IN (
    SELECT ENR_STDNO FROM ENROLLMENT
    );