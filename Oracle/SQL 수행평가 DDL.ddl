-- 생성자 Oracle SQL Developer Data Modeler 24.3.1.347.1153
--   위치:        2025-08-13 09:16:14 KST


CREATE TABLE account (
    acc_id            CHAR(14) NOT NULL,
    cust_jumin        CHAR(14),
    acc_type          VARCHAR2(20) NOT NULL,
    acc_balance       NUMBER NOT NULL,
    acc_card          CHAR(1) NOT NULL,
    acc_register_date DATE
);

ALTER TABLE account ADD CONSTRAINT account_pk PRIMARY KEY ( acc_id );

CREATE TABLE card (
    card_no            CHAR(14) NOT NULL,
    cust_jumin         CHAR(14),
    acc_id             CHAR(14),
    card_register_date DATE,
    card_limit         NUMBER,
    card_approve_date  DATE,
    card_type          VARCHAR2(10) NOT NULL
);

ALTER TABLE card ADD CONSTRAINT card_pk PRIMARY KEY ( card_no );

CREATE TABLE customer (
    cust_jumin CHAR(14) NOT NULL,
    name       VARCHAR2(20) NOT NULL,
    address    VARCHAR2(100) NOT NULL,
    birth      CHAR(10) NOT NULL,
    email      VARCHAR2(100),
    hp         VARCHAR2(20) NOT NULL,
    job        VARCHAR2(20)
);

ALTER TABLE customer ADD CONSTRAINT customer_pk PRIMARY KEY ( cust_jumin );

CREATE TABLE transaction (
    trans_id      NUMBER NOT NULL,
    trans_acc_id  CHAR(14) NOT NULL,
    trans_type    VARCHAR2(20),
    trans_message VARCHAR2(20),
    trans_money   NUMBER,
    trans_date    DATE NOT NULL
);

ALTER TABLE transaction ADD CONSTRAINT transaction_pk PRIMARY KEY ( trans_id );

ALTER TABLE account
    ADD CONSTRAINT account_customer_fk FOREIGN KEY ( cust_jumin )
        REFERENCES customer ( cust_jumin );

ALTER TABLE card
    ADD CONSTRAINT card_account_fk FOREIGN KEY ( acc_id )
        REFERENCES account ( acc_id );

ALTER TABLE card
    ADD CONSTRAINT card_customer_fk FOREIGN KEY ( cust_jumin )
        REFERENCES customer ( cust_jumin );

ALTER TABLE transaction
    ADD CONSTRAINT transaction_account_fk FOREIGN KEY ( trans_acc_id )
        REFERENCES account ( acc_id );

CREATE SEQUENCE transaction_trans_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER transaction_trans_id_trg BEFORE
    INSERT ON transaction
    FOR EACH ROW
    WHEN ( new.trans_id IS NULL )
BEGIN
    :new.trans_id := transaction_trans_id_seq.nextval;
END;
/

-- 데이터 입력
INSERT INTO CUSTOMER VALUES('760121-1234567', '정우성', '서울', '1976-01-21', NULL, '010-1101-7601', '배우');
INSERT INTO CUSTOMER VALUES('750611-1234567', '이정재', '서울', '1975-06-11', NULL, '010-1102-7506', '배우');
INSERT INTO CUSTOMER VALUES('890530-1234567', '전지현', '대전', '1989-05-30', 'jjh@naver.com', '010-1103-8905', '자영업');
INSERT INTO CUSTOMER VALUES('790413-1234567', '이나영', '대전', '1979-04-13', 'lee@naver.com', '010-2101-7904', '회사원');
INSERT INTO CUSTOMER VALUES('660912-1234567', '원빈', '대전', '1966-09-12', 'one@daum.net', '010-2104-6609', '배우');

select * from customer;

INSERT INTO CARD VALUES('2111-1001-1001', '760121-1234567', '1011-1001-1001', '2020-01-21', 1000000, '2020-02-10', 'check');
INSERT INTO CARD VALUES('2041-1001-1002', '890530-1234567', '1011-1001-1002', '2020-06-11', 3000000, '2020-06-15', 'check');
INSERT INTO CARD VALUES('2011-1001-1003', '790413-1234567', '1011-1001-1003', '2020-05-30', 5000000, '2020-06-25', 'check');
INSERT INTO CARD VALUES('2611-1001-1005', '750611-1234567', '1011-1002-1005', '2020-09-12', 1500000, '2020-10-10', 'check');

SELECT * FROM CARD;

INSERT INTO ACCOUNT VALUES('1011-1001-1001', '760121-1234567', '자유입출금', 4160000, 'Y', '2020-01-21 13:00:02');
INSERT INTO ACCOUNT VALUES('1011-1001-1002', '890530-1234567', '자유입출금', 376000, 'Y', '2020-06-11 13:00:02');
INSERT INTO ACCOUNT VALUES('1011-1001-1003', '790413-1234567', '자유입출금', 1200000, 'Y', '2020-05-30 13:00:02');
INSERT INTO ACCOUNT VALUES('1011-2001-1004', '660912-1234567', '정기적금', 1000000, 'N', '2020-04-13 13:00:02');
INSERT INTO ACCOUNT VALUES('1011-1002-1005', '750611-1234567', '자유입출금', 820000, 'Y', '2020-09-12 13:00:02');

SELECT * FROM ACCOUNT;

INSERT INTO TRANSACTION VALUES(TRANSACTION_TRANS_ID_SEQ.NEXTVAL, '1011-1001-1001', '입금', '2월 정기급여', 3500000, '2020-02-10 12:36:12');
INSERT INTO TRANSACTION(TRANS_ACC_ID, TRANS_TYPE, TRANS_MESSAGE, TRANS_MONEY, TRANS_DATE) 
VALUES('1011-1001-1003' , '출금', 'ATM 출금', 300000, '2020-02-10  12:37:21');
INSERT INTO TRANSACTION(TRANS_ACC_ID, TRANS_TYPE, TRANS_MESSAGE, TRANS_MONEY, TRANS_DATE) 
VALUES('1011-1001-1002' , '입금', '2월 급여', 2800000, '2020-02-10  12:38:21');
INSERT INTO TRANSACTION(TRANS_ACC_ID, TRANS_TYPE, TRANS_MESSAGE, TRANS_MONEY, TRANS_DATE) 
VALUES('1011-1001-1001' , '출금', '2월 공과금', 116200, '2020-02-10  12:39:21');
INSERT INTO TRANSACTION(TRANS_ACC_ID, TRANS_TYPE, TRANS_MESSAGE, TRANS_MONEY, TRANS_DATE) 
VALUES('1011-1002-1005' , '출금', 'ATM 출금', 50000, '2020-02-10  12:40:21');


-- SQL 실행

SELECT * FROM CUSTOMER;

SELECT * FROM CARD;

SELECT * FROM ACCOUNT;

SELECT * FROM TRANSACTION ORDER BY TRANS_DATE DESC FETCH FIRST 3 ROWS ONLY;

SELECT 
    NAME AS 이름,
    CARD_TYPE AS 카드_종류
FROM CUSTOMER A
JOIN CARD B ON A.CUST_JUMIN = B.CUST_JUMIN
WHERE CARD_LIMIT >= 2000000;

SELECT 
    TRANS_ACC_ID AS 예금계좌, 
    COUNT(TRANS_ACC_ID) AS 거래_건_수 
FROM TRANSACTION
GROUP BY TRANS_ACC_ID;


SELECT 
    *
FROM TRANSACTION 
WHERE TRANS_MONEY >= 1000000 
ORDER BY TRANS_DATE DESC;

SELECT
    A.ACC_ID AS 계좌번호,
    CARD_NO AS 카드번호,
    CARD_TYPE AS 카드_종류
FROM ACCOUNT A
RIGHT JOIN CARD B ON A.CUST_JUMIN = B.CUST_JUMIN;

SELECT
    SUM(TRANS_MONEY) AS 입금_거래_총합
FROM TRANSACTION 
WHERE TRANS_TYPE = '입금';

SELECT 
    NAME AS 이름,
    A.CUST_JUMIN AS 주민등록번호,
    HP AS 연락처,
    ADDRESS AS 주소
FROM ACCOUNT A
JOIN CUSTOMER B ON A.CUST_JUMIN = B.CUST_JUMIN
WHERE ACC_BALANCE >= 4000000;


